# ui/menu.py
import os
from typing import Any, List, Optional, Dict, Tuple

# Precisamos importar as configura√ß√µes de restri√ß√£o que est√£o em main.py
# para poder exibir o menu do submenu_testes_restricao.
# Isso cria uma pequena depend√™ncia c√≠clica se CONFIGURACOES_TESTES_RESTRICAO importar
# algo de ui/, mas como ele √© apenas um dict, geralmente n√£o √© um problema.
# No entanto, uma forma mais limpa seria passar CONFIGURACOES_TESTES_RESTRICAO
# como argumento para main_menu_loop em main.py, e main_menu_loop pass√°-lo
# para submenu_testes_restricao. J√° fizemos isso!

from modelos.moto import Moto, MotoEstatisticas
from ui.helpers import validar_float, validar_int, obter_dados_moto


# from main import CONFIGURACOES_TESTES_RESTRICAO # N√£o precisa mais importar aqui, pois √© passado


def menu_estrutura(estrutura: Any, nome_estrutura: str, dataset_principal: List[Moto]) -> None:
    """
    Exibe o menu de opera√ß√µes para uma estrutura de dados espec√≠fica,
    permitindo interagir com ela individualmente.
    """
    while True:
        print(f"\n{'=' * 15} MENU: {nome_estrutura.upper()} {'=' * 15}")
        struct_len = -1
        if hasattr(estrutura, '__len__'):
            try:
                struct_len = len(estrutura)
            except TypeError:
                pass

        print(f"Total de motos na estrutura: {struct_len if struct_len != -1 else 'N/A'}")
        print(f"Total de motos no dataset principal (Original): {len(dataset_principal)}")

        print("1. Inserir Moto")
        # Verifica se a remo√ß√£o √© suportada/implementada
        suporta_remocao = hasattr(estrutura, 'remover')
        # Particularidades para Bloom Filter e BTree (com remo√ß√£o placeholder)
        if nome_estrutura == "BLOOM FILTER":
            print("2. Remover Moto (N√£o suportado)")
        elif nome_estrutura == "√ÅRVORE B" and suporta_remocao:
            # Check if it's the placeholder remover
            is_placeholder_remover = False
            if hasattr(estrutura.remover, '__code__'):  # Check if it's a Python function
                # Simple heuristic: check function source or docstring for hints of placeholder
                try:
                    import inspect
                    src = inspect.getsource(estrutura.remover)
                    if 'return False' in src and 'def remover' in src:  # Crude check
                        is_placeholder_remover = True
                except Exception:
                    pass  # Ignore errors during inspection

            if is_placeholder_remover:
                print("2. Remover Moto (Aviso: Implementa√ß√£o placeholder)")
            else:
                print("2. Remover Moto")  # Implementa√ß√£o real existe
        elif suporta_remocao:
            print("2. Remover Moto")
        else:  # Se n√£o tem 'remover'
            print(f"2. Remover Moto (N√£o implementado para {nome_estrutura})")

        print("3. Buscar Moto")
        print("4. Exibir Todas as Motos na Estrutura")
        print("5. Estat√≠sticas Detalhadas do Dataset Completo")
        print("6. Simular Tend√™ncias Futuras (Dataset Completo)")
        print("7. Filtrar e Ordenar (Dataset Completo)")
        print("0. Voltar ao Menu Principal")

        escolha = input("Escolha uma op√ß√£o: ").strip()

        if escolha == '1':  # Inserir
            print("\n--- Inserir Nova Moto ---")
            nova_moto = obter_dados_moto(para_busca=False)
            try:
                if hasattr(estrutura, 'inserir'):
                    # Inser√ß√£o retorna True se bem-sucedida, False se falhou (ex: limite M1, duplicata)
                    inseriu_status = estrutura.inserir(nova_moto)
                    if inseriu_status is not False:  # Considera None ou True como sucesso
                        print(f"\n‚úÖ Moto '{nova_moto.nome}' inserida na estrutura!")
                        # Se a estrutura n√£o tem limite de elementos (ou o limite n√£o foi atingido)
                        # e a moto n√£o existia no dataset original, adiciona l√°.
                        # Note: M2 (LinkedList LRU) adiciona e pode remover antigos internamente.
                        # A sincroniza√ß√£o perfeita entre estrutura e dataset_principal √© complexa.
                        # Vamos adicionar ao dataset_principal apenas se a moto n√£o estiver l√°.
                        if nova_moto not in dataset_principal:
                            dataset_principal.append(nova_moto)
                            print("‚úÖ Adicionada tamb√©m ao dataset principal para refer√™ncia.")
                        # else: # J√° estava no dataset principal
                        #     print("‚ÑπÔ∏è Moto j√° existia no dataset principal.")

                    else:  # Inserir retornou False (falhou/n√£o adicionou)
                        # Verificar motivo prov√°vel
                        if hasattr(estrutura, 'max_elements') and estrutura.max_elements is not None and hasattr(
                                estrutura, '__len__') and len(estrutura) >= estrutura.max_elements:
                            print(
                                f"\nüü° Inser√ß√£o falhou: Estrutura {nome_estrutura} atingiu limite m√°ximo de elementos ({estrutura.max_elements}).")
                        else:
                            # Outro motivo (duplicata exata, l√≥gica interna)
                            print(f"\nüü° Inser√ß√£o falhou na estrutura {nome_estrutura}.")
                else:
                    print(f"\n‚ùå Erro: {nome_estrutura} n√£o suporta inser√ß√£o ou m√©todo n√£o encontrado.")
            except Exception as e:
                print(f"\n‚ùå Erro ao inserir na estrutura {nome_estrutura}: {e}")


        elif escolha == '2':  # Remover
            if nome_estrutura == "BLOOM FILTER":
                print("\n‚ùå Opera√ß√£o de remo√ß√£o n√£o √© suportada por Bloom Filters.")
            elif not hasattr(estrutura, 'remover'):  # Checagem gen√©rica
                print(f"\n‚ùå Opera√ß√£o de remo√ß√£o n√£o implementada para {nome_estrutura}.")
            else:
                print("\n--- Remover Moto ---")
                moto_para_remover = obter_dados_moto(para_busca=True)
                try:
                    removido_da_estrutura = estrutura.remover(moto_para_remover)
                    if removido_da_estrutura:
                        print(f"\n‚úÖ Moto '{moto_para_remover.nome}' removida da estrutura.")
                        # Tenta remover do dataset_principal tamb√©m
                        # Cuidado: se houver m√∫ltiplas motos "iguais" no dataset, isso remover√° a primeira.
                        try:
                            dataset_principal.remove(moto_para_remover)  # Remove primeira ocorr√™ncia
                            print("‚úÖ Removida tamb√©m do dataset principal para refer√™ncia.")
                        except ValueError:
                            print("‚ÑπÔ∏è Moto n√£o encontrada no dataset principal (ou j√° removida).")
                    elif nome_estrutura == "√ÅRVORE B":
                        print(
                            f"\nüü° Remo√ß√£o na B-Tree √© placeholder ou moto '{moto_para_remover.nome}' n√£o foi efetivamente removida/encontrada.")
                    else:
                        print(f"\nüü° Moto '{moto_para_remover.nome}' n√£o encontrada/removida da {nome_estrutura}.")
                except Exception as e:
                    print(f"\n‚ùå Erro ao remover da estrutura {nome_estrutura}: {e}")

        elif escolha == '3':  # Buscar
            if not hasattr(estrutura, 'buscar'):
                print(f"\n‚ùå Opera√ß√£o de busca n√£o implementada para {nome_estrutura}.")
            else:
                print("\n--- Buscar Moto ---")
                moto_para_buscar = obter_dados_moto(para_busca=True)
                try:
                    if nome_estrutura == "BLOOM FILTER":
                        encontrado_bf = estrutura.buscar(moto_para_buscar)
                        print(
                            f"\nResultado da busca no Bloom Filter: {'PROVAVELMENTE ENCONTRADO' if encontrado_bf else 'DEFINITIVAMENTE N√ÉO ENCONTRADO'}")
                        if encontrado_bf: print("  (Lembre-se que Bloom Filters podem ter falsos positivos)")
                    else:
                        encontrado, passos = estrutura.buscar(moto_para_buscar)
                        status = "‚úÖ Encontrado" if encontrado else "üü° N√£o encontrado"
                        # Mensagem espec√≠fica se limite de passos foi atingido
                        if hasattr(estrutura,
                                   '_search_step_limit') and estrutura._search_step_limit is not None and passos > estrutura._search_step_limit and not encontrado:
                            status += f" (Limite de {estrutura._search_step_limit} passos atingido durante a busca)"

                        print(f"\nResultado da busca: {status} em {passos} passos/compara√ß√µes.")

                except Exception as e:
                    print(f"\n‚ùå Erro ao buscar na estrutura {nome_estrutura}: {e}")


        elif escolha == '4':  # Exibir
            if hasattr(estrutura, 'exibir'):
                print(f"\n--- Exibindo Motos em {nome_estrutura} ---")
                estrutura.exibir()
            else:
                print(f"\n‚ùå Opera√ß√£o de exibi√ß√£o n√£o implementada para {nome_estrutura}.")

        elif escolha == '5':  # Estat√≠sticas do Dataset Completo
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio. N√£o h√° estat√≠sticas para calcular.")
            else:
                print("\n--- Estat√≠sticas Detalhadas do Dataset Completo ---")
                estatisticas = MotoEstatisticas.calcular_estatisticas(dataset_principal)
                print(f"\nPre√ßos (Total: {len(dataset_principal)} motos):")
                print(f"  M√©dia: R${estatisticas['preco']['media']:.2f}")
                print(f"  Mediana: R${estatisticas['preco']['mediana']:.2f}")
                print(f"  Desvio Padr√£o: R${estatisticas['preco']['desvio_padrao']:.2f}")
                print(f"  Vari√¢ncia: R${estatisticas['preco']['variancia']:.2f}")
                print(f"\nRevendas:")
                print(f"  M√©dia: R${estatisticas['revenda']['media']:.2f}")
                print(f"  Mediana: R${estatisticas['revenda']['mediana']:.2f}")
                print(f"  Desvio Padr√£o: R${estatisticas['revenda']['desvio_padrao']:.2f}")
                print(f"  Vari√¢ncia: R${estatisticas['revenda']['variancia']:.2f}")
                print(f"\nAnos:")
                moda_anos = estatisticas['ano']['moda']
                if isinstance(moda_anos, list):
                    print(f"  Moda(s): {', '.join(map(str, moda_anos))}")
                else:
                    print(f"  Moda: {moda_anos}")
                print(f"  M√©dia: {estatisticas['ano']['media']:.1f}")
                print(f"  Mediana: {estatisticas['ano']['mediana']}")
                print(f"\nDeprecia√ß√£o (Valor Absoluto):")
                print(f"  M√©dia: R${estatisticas['depreciacao']['media']:.2f}")
                print(f"  Mediana: R${estatisticas['depreciacao']['mediana']:.2f}")
                print(f"\nTaxa de Deprecia√ß√£o (%):")
                print(f"  M√©dia: {estatisticas['taxa_depreciacao']['media']:.2f}%")
                print(f"  Mediana: {estatisticas['taxa_depreciacao']['mediana']:.2f}%")
                print("\nGerando gr√°ficos estat√≠sticos do dataset completo...")
                MotoEstatisticas.gerar_graficos(dataset_principal)


        elif escolha == '6':  # Simular Tend√™ncias
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio.")
            else:
                try:
                    anos_futuros = validar_int("Quantos anos no futuro para prever (ex: 5)? ", min_val=1, max_val=50)
                    MotoEstatisticas.prever_tendencias(dataset_principal, anos_futuros)
                except ValueError:
                    print("Erro: Entrada inv√°lida para anos futuros.")

        elif escolha == '7':  # Filtrar e Ordenar
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio.")
            else:
                submenu_filtrar_ordenar(dataset_principal)

        elif escolha == '0':
            print(f"\nVoltando ao Menu Principal...")
            break
        else:
            print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")

        input("\nPressione Enter para continuar...")


def submenu_filtrar_ordenar(dataset: List[Moto]):
    """Permite filtrar e ordenar uma c√≥pia do dataset principal."""
    print("\n--- Filtrar e Ordenar Dataset Completo ---")
    print("1. Filtrar por marca")
    print("2. Filtrar por faixa de pre√ßo original")
    print("3. Ordenar por pre√ßo original (crescente)")
    print("4. Ordenar por ano de fabrica√ß√£o (mais novo primeiro)")
    print("5. Filtrar por taxa de deprecia√ß√£o m√°xima (ex: at√© 30%)")
    print("0. Voltar")
    opcao = input("Escolha uma op√ß√£o de filtro/ordena√ß√£o: ").strip()
    dados_para_exibir = list(dataset)  # Trabalha com uma c√≥pia

    if opcao == '1':
        marca_filtro = input("Digite a marca para filtrar: ").strip().upper()
        if marca_filtro:
            dados_para_exibir = [m for m in dados_para_exibir if m.marca.upper() == marca_filtro]
        else:
            print("Marca vazia, nenhum filtro aplicado.")
    elif opcao == '2':
        min_preco = validar_float("Pre√ßo m√≠nimo original: ", min_val=0)
        max_preco = validar_float("Pre√ßo m√°ximo original: ", min_val=min_preco)
        dados_para_exibir = [m for m in dados_para_exibir if min_preco <= m.preco <= max_preco]
    elif opcao == '3':
        dados_para_exibir.sort(key=lambda m: m.preco)
    elif opcao == '4':
        dados_para_exibir.sort(key=lambda m: m.ano, reverse=True)
    elif opcao == '5':
        max_taxa_deprec = validar_float("Taxa m√°xima de deprecia√ß√£o permitida (%): ", min_val=0,
                                        max_val=100)
        # Assume que preco > 0 antes de calcular a taxa
        filtrados = [
            m for m in dados_para_exibir
            if m.preco > 0 and ((m.preco - m.revenda) / m.preco * 100) <= max_taxa_deprec
        ]
        # Inclui motos com preco <= 0 no resultado se max_taxa_deprec >= 100?
        # Se max_taxa_deprec == 100, deprecia√ß√£o de 100% ou mais inclui preco=0 (div por zero).
        # Decis√£o: motos com preco <= 0 s√≥ s√£o inclu√≠das se a taxa_deprec for <= max_taxa_deprec,
        # o que s√≥ faz sentido se preco > 0. Mantemos a filtragem para preco > 0.
        dados_para_exibir = filtrados

    elif opcao == '0':
        return
    else:
        print("Op√ß√£o inv√°lida. Voltando ao menu de filtros.")
        return  # Retorna do submenu se inv√°lido

    if not dados_para_exibir:
        print("\nNenhuma moto encontrada com os crit√©rios especificados.")
    else:
        print("\n" + "=" * 80)
        print(f"{'Marca':<15}{'Modelo':<25}{'Pre√ßo (R$)':<12}{'Revenda (R$)':<15}{'Ano':<6}{'Deprec.%':<10}")
        print("-" * 80)
        for i, m in enumerate(dados_para_exibir):
            if i >= 50:
                print(f"... e mais {len(dados_para_exibir) - 50} motos.")
                break
            # Calcula deprecia√ß√£o apenas para exibi√ß√£o
            deprec_percent = ((m.preco - m.revenda) / m.preco * 100) if m.preco > 0 else 0.0
            print(f"{m.marca:<15}{m.nome:<25}{m.preco:<12.2f}{m.revenda:<15.2f}{m.ano:<6}{deprec_percent:<10.1f}")
        print(f"\nTotal de motos filtradas/ordenadas: {len(dados_para_exibir)} (exibindo at√© 50)")
        print("=" * 80)


def submenu_testes_restricao(analyzer: Any, configuracoes_restricoes: Dict[str, Dict[str, Any]]):
    """
    Exibe um submenu para o usu√°rio escolher e executar testes com condi√ß√µes restritivas.
    Chama analyzer.run_suite_with_restriction para o teste escolhido.
    """
    while True:
        print("\n" + "=" * 20 + " TESTES COM CONDI√á√ïES RESTRITIVAS " + "=" * 20)
        if not configuracoes_restricoes:
            print("Nenhuma configura√ß√£o de teste de restri√ß√£o definida.")
            return

        # Agrupa e ordena testes por categoria e depois por nome
        categorias: Dict[str, List[Tuple[str, str]]] = {}  # categoria -> lista de (id, nome)
        for id_teste, config in configuracoes_restricoes.items():
            cat = config.get("categoria", "Outros")
            if cat not in categorias:
                categorias[cat] = []
            categorias[cat].append((id_teste, config.get("nome", id_teste)))

        idx_global = 1
        opcoes_menu_mapeamento: Dict[str, str] = {}  # N√∫mero da op√ß√£o do menu -> id do teste

        # Exibe as op√ß√µes do menu de restri√ß√£o
        for cat_nome, testes_na_categoria in sorted(categorias.items()):
            print(f"\n--- {cat_nome.upper()} ---")
            for id_teste, nome_teste in sorted(testes_na_categoria, key=lambda x: x[1]):
                print(f"{idx_global}. {nome_teste}")
                opcoes_menu_mapeamento[str(idx_global)] = id_teste
                idx_global += 1

        print("\n0. Voltar ao Menu Principal")

        escolha_teste_num = input("Escolha um teste de restri√ß√£o para executar: ").strip()

        if escolha_teste_num == '0':
            print("\nVoltando ao Menu Principal...")
            break  # Sai do loop do submenu

        id_teste_escolhido = opcoes_menu_mapeamento.get(escolha_teste_num)
        if not id_teste_escolhido:
            print("\nOp√ß√£o inv√°lida!")
            continue  # Continua no loop do submenu

        config_escolhida = configuracoes_restricoes[id_teste_escolhido]
        print(f"\nIniciando teste: {config_escolhida['nome']}...")

        try:
            # Configurar par√¢metros para a su√≠te de an√°lise sob restri√ß√£o
            # Usar o √∫ltimo sample_size ou um padr√£o sensato se nenhum foi usado antes.
            # Para testes de restri√ß√£o, um sample_size menor pode ser mais r√°pido para iterar.
            default_init_size_restr = analyzer.last_init_sample_size if analyzer.last_init_sample_size is not None else 1000  # Tamanho padr√£o se VAZIO no prompt
            init_s_str_restr = input(
                f"Tamanho da amostra para o Benchmark Padr√£o (Padr√£o {default_init_size_restr}. VAZIO para padr√£o): ").strip()
            init_sample_restr = int(init_s_str_restr) if init_s_str_restr else default_init_size_restr
            if init_sample_restr < 0: init_sample_restr = default_init_size_restr; print(
                "INFO: Amostra inv√°lida, usando padr√£o.")

            bench_ops_s_restr = input(f"N√∫mero de opera√ß√µes para benchmarks (padr√£o 100): ").strip()
            bench_ops_restr = int(bench_ops_s_restr) if bench_ops_s_restr and bench_ops_s_restr.isdigit() else 100
            if bench_ops_restr < 0: bench_ops_restr = 100; print("INFO: N√∫mero de opera√ß√µes inv√°lido, usando 100.")

            # Perguntar se quer rodar escalabilidade tamb√©m sob esta restri√ß√£o
            run_scal_restr_input = input(
                "Rodar testes de escalabilidade TAMB√âM sob esta restri√ß√£o? (s/n, padr√£o n): ").strip().lower()
            run_scal_restr = True if run_scal_restr_input == 's' else False

            scal_sizes_restr: Optional[List[int]] = None  # Inicializa como None
            if run_scal_restr:
                print("\n--- Configurar Testes de Escalabilidade (Sob Restri√ß√£o) ---")
                sizes_str_restr = input(
                    "Tamanhos N para escalar (ex: 100,500,1000). VAZIO para padr√£o de escalabilidade: ").strip()
                if sizes_str_restr:
                    raw_sizes = [s.strip() for s in sizes_str_restr.split(',')];
                    if all(s.isdigit() and int(s) > 0 for s in raw_sizes if s):
                        scal_sizes_restr = [int(s) for s in raw_sizes if s]
                    else:
                        print("AVISO: Formato de tamanhos N inv√°lido. Usando tamanhos padr√£o de escalabilidade.")
                        # scal_sizes_restr permanece None, ser√° tratado em run_scalability_tests
                else:
                    print("INFO: Usando tamanhos padr√£o de escalabilidade para testes sob restri√ß√£o.")

                # Poder√≠amos adicionar aqui input para num_searches para escalabilidade se for diferente do benchmark padr√£o
                # num_searches_escalab_s = input(f"# Buscas para escalabilidade (padr√£o {100}): ").strip(); ...

            # Executar a su√≠te de an√°lise com a restri√ß√£o
            analyzer.run_suite_with_restriction(
                restriction_config=config_escolhida,  # Passa a configura√ß√£o da restri√ß√£o
                init_sample_size=init_sample_restr,
                benchmark_ops_count=bench_ops_restr,
                run_scalability_flag=run_scal_restr,  # Indica se √© para rodar escalabilidade tbm
                scalability_sizes=scal_sizes_restr  # Passa os tamanhos para escalabilidade, se definidos
            )
        except ValueError:
            print("ERRO: Entrada inv√°lida. Por favor, digite n√∫meros inteiros para amostras, opera√ß√µes, etc.")
        except Exception as e:
            print(f"ERRO inesperado durante execu√ß√£o do teste '{config_escolhida.get('nome', 'N/A')}': {e}")
            import traceback
            traceback.print_exc()  # Para mostrar o erro completo no console se algo der errado

        # O input final "Pressione Enter para continuar..." √© feito no main_menu_loop,
        # n√£o precisa aqui no final do submenu.