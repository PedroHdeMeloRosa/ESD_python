# ui/menu.py
import os
from typing import Any, List, Optional  # Adicionado Optional
from modelos.moto import Moto, MotoEstatisticas
from ui.helpers import validar_float, validar_int, obter_dados_moto
import datetime  # Para helpers


# Vari√°vel global para armazenar o dataset, se necess√°rio ser acessado por outras partes do UI
# No entanto, √© melhor passar como par√¢metro. Mas para simplificar o exemplo do menu,
# se menu_estrutura for chamado m√∫ltiplas vezes com o mesmo dataset, ele √© passado.
# GLOBAL_DATASET_UI: List[Moto] = []


def menu_estrutura(estrutura: Any, nome_estrutura: str, dataset_principal: List[Moto]) -> None:
    """
    Exibe o menu de opera√ß√µes para uma estrutura de dados espec√≠fica.

    :param estrutura: A inst√¢ncia da estrutura de dados (ex: LinkedList, AVLTree).
    :param nome_estrutura: Nome amig√°vel da estrutura para exibi√ß√£o.
    :param dataset_principal: A lista principal de motos, usada para algumas opera√ß√µes
                              como estat√≠sticas e como fonte para popular/remover da estrutura.
                              Altera√ß√µes (inser√ß√£o/remo√ß√£o) na estrutura tamb√©m devem refletir aqui.
    """
    # global GLOBAL_DATASET_UI
    # GLOBAL_DATASET_UI = dataset_principal # Se precisar acessar o dataset de outras funcs do UI

    while True:
        print(f"\n{'=' * 15} MENU: {nome_estrutura.upper()} {'=' * 15}")
        print(f"Total de motos na estrutura: {len(estrutura) if hasattr(estrutura, '__len__') else 'N/A'}")
        print("1. Inserir Moto")
        if nome_estrutura not in [
            "BLOOM FILTER"]:  # RadixTree pode ter remo√ß√£o complexa, mas n√£o explicitamente proibida
            print("2. Remover Moto")
        else:
            print("2. Remover Moto (N√£o suportado para Bloom Filter)")
        print("3. Buscar Moto")
        print("4. Exibir Todas as Motos na Estrutura")
        print("5. Estat√≠sticas Detalhadas do Dataset Completo")
        print("6. Simular Tend√™ncias Futuras (Dataset Completo)")
        print("7. Filtrar e Ordenar (Dataset Completo)")
        print("0. Voltar ao Menu Principal")

        escolha = input("Escolha uma op√ß√£o: ").strip()

        if escolha == '1':
            print("\n--- Inserir Nova Moto ---")
            nova_moto = obter_dados_moto(para_busca=False)

            # L√≥gica espec√≠fica para RadixTree (baseada em nome como chave prim√°ria)
            # A RadixTree em si j√° lida com n√£o adicionar Moto id√™nticas se a chave (nome) for a mesma.
            # A busca antes da inser√ß√£o aqui seria mais para feedback ao usu√°rio.
            if nome_estrutura == "RADIX TREE":
                # A RadixTree implementada armazena uma lista de motos por chave (nome).
                # A inser√ß√£o na RadixTree j√° verifica se a *moto exata* est√° na lista do n√≥.
                # N√£o √© preciso buscar antes aqui no menu, a menos que queira um feedback espec√≠fico.
                pass  # A inser√ß√£o abaixo cuidar√° disso.

            try:
                # Tenta inserir na estrutura
                if hasattr(estrutura, 'inserir'):
                    # Para estruturas que retornam algo na inser√ß√£o (ex: AVL pode retornar flag)
                    # ou para medir desempenho individualmente (embora centralizado no main.py)
                    resultado_insercao = estrutura.inserir(nova_moto)

                    # Adiciona ao dataset_principal SE AINDA N√ÉO EXISTIR para evitar duplicatas na lista Python
                    # A estrutura interna pode ter sua pr√≥pria l√≥gica de duplicatas.
                    if nova_moto not in dataset_principal:
                        dataset_principal.append(nova_moto)
                        print(f"\n‚úÖ Moto '{nova_moto.nome}' inserida com sucesso na estrutura e no dataset principal!")
                    elif nova_moto in dataset_principal and hasattr(estrutura, 'buscar') and \
                            estrutura.buscar(nova_moto)[0]:
                        print(f"\n‚ÑπÔ∏è Moto '{nova_moto.nome}' j√° existe no dataset e na estrutura.")
                    else:  # Existe no dataset, mas talvez n√£o na estrutura (ex: ap√≥s limpar estrutura)
                        dataset_principal.append(nova_moto)  # Garante que est√° no dataset
                        print(f"\n‚úÖ Moto '{nova_moto.nome}' inserida com sucesso na estrutura (j√° existia no dataset).")
                else:
                    print(
                        f"\n‚ùå Erro: A estrutura {nome_estrutura} n√£o suporta inser√ß√£o direta ou o m√©todo n√£o foi encontrado.")

            except Exception as e:
                print(f"\n‚ùå Erro ao inserir na estrutura {nome_estrutura}: {e}")


        elif escolha == '2':
            if nome_estrutura == "BLOOM FILTER":
                print("\n‚ùå Opera√ß√£o de remo√ß√£o n√£o √© suportada diretamente por Bloom Filters.")
                continue
            # RadixTree: remo√ß√£o √© complexa, assumindo que n√£o est√° implementada a menos que `remover` exista.
            if not hasattr(estrutura, 'remover'):
                print(f"\n‚ùå Opera√ß√£o de remo√ß√£o n√£o implementada para {nome_estrutura}.")
                continue

            print("\n--- Remover Moto ---")
            moto_para_remover = obter_dados_moto(para_busca=True)  # Permite busca gen√©rica

            try:
                removido_da_estrutura = estrutura.remover(moto_para_remover)
                if removido_da_estrutura:
                    print(f"\n‚úÖ Moto '{moto_para_remover.nome}' removida da estrutura.")
                    # Tenta remover do dataset_principal tamb√©m
                    # Cuidado: se houver m√∫ltiplas motos "iguais" no dataset, isso remover√° a primeira.
                    try:
                        dataset_principal.remove(moto_para_remover)
                        print("‚úÖ Moto tamb√©m removida do dataset principal.")
                    except ValueError:
                        print("‚ÑπÔ∏è Moto n√£o encontrada no dataset principal (ou j√° removida).")
                else:
                    print(
                        f"\nüü° Moto '{moto_para_remover.nome}' n√£o encontrada na estrutura {nome_estrutura} com os crit√©rios fornecidos.")
            except Exception as e:
                print(f"\n‚ùå Erro ao remover da estrutura {nome_estrutura}: {e}")

        elif escolha == '3':
            if not hasattr(estrutura, 'buscar'):
                print(f"\n‚ùå Opera√ß√£o de busca n√£o implementada para {nome_estrutura}.")
                continue

            print("\n--- Buscar Moto ---")
            moto_para_buscar = obter_dados_moto(para_busca=True)

            try:
                if nome_estrutura == "BLOOM FILTER":
                    encontrado_bf = estrutura.buscar(moto_para_buscar)
                    print(
                        f"\nResultado da busca no Bloom Filter: {'PROVAVELMENTE ENCONTRADO' if encontrado_bf else 'DEFINITIVAMENTE N√ÉO ENCONTRADO'}")
                    if encontrado_bf:
                        print("  (Lembre-se que Bloom Filters podem ter falsos positivos)")
                else:
                    encontrado, passos = estrutura.buscar(moto_para_buscar)
                    status = "‚úÖ Encontrado" if encontrado else "üü° N√£o encontrado"
                    print(f"\nResultado da busca: {status} em {passos} passos/compara√ß√µes.")
            except Exception as e:
                print(f"\n‚ùå Erro ao buscar na estrutura {nome_estrutura}: {e}")


        elif escolha == '4':
            if hasattr(estrutura, 'exibir'):
                print(f"\n--- Exibindo Motos em {nome_estrutura} ---")
                estrutura.exibir()
            else:
                print(f"\n‚ùå Opera√ß√£o de exibi√ß√£o n√£o implementada para {nome_estrutura}.")

        elif escolha == '5':
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio. N√£o h√° estat√≠sticas para calcular.")
                continue
            print("\n--- Estat√≠sticas Detalhadas do Dataset Completo ---")
            estatisticas = MotoEstatisticas.calcular_estatisticas(dataset_principal)
            print(f"\nPre√ßos (Total: {len(dataset_principal)} motos):")
            print(f"  M√©dia: R${estatisticas['preco']['media']:.2f}")
            print(f"  Mediana: R${estatisticas['preco']['mediana']:.2f}")
            print(f"  Desvio Padr√£o: R${estatisticas['preco']['desvio_padrao']:.2f}")
            # ... (restante da exibi√ß√£o de estat√≠sticas como antes) ...
            print(f"\nRevendas:")
            print(f"  M√©dia: R${estatisticas['revenda']['media']:.2f}")
            # ...
            print(f"\nAnos:")
            print(f"  Moda: {estatisticas['ano']['moda']}")  # Pode ser uma lista se houver m√∫ltiplas modas
            # ...
            print("\nGerando gr√°ficos estat√≠sticos do dataset completo...")
            MotoEstatisticas.gerar_graficos(dataset_principal)


        elif escolha == '6':
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio. N√£o √© poss√≠vel simular tend√™ncias.")
                continue
            try:
                anos_futuros = validar_int("Quantos anos no futuro para prever a tend√™ncia (ex: 5)? ", min_val=1,
                                           max_val=50)
                print("\n--- Simulando Tend√™ncias Futuras (Dataset Completo) ---")
                MotoEstatisticas.prever_tendencias(dataset_principal, anos_futuros)
            except ValueError:  # J√° tratado em validar_int, mas como seguran√ßa
                print("Erro: Entrada inv√°lida para anos futuros.")

        elif escolha == '7':
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio. N√£o √© poss√≠vel filtrar ou ordenar.")
                continue
            submenu_filtrar_ordenar(dataset_principal)


        elif escolha == '0':
            print(f"\nVoltando ao Menu Principal...")
            break

        else:
            print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")

        input("\nPressione Enter para continuar...")  # Pausa para o usu√°rio ler a sa√≠da


def submenu_filtrar_ordenar(dataset: List[Moto]):
    """Permite filtrar e ordenar o dataset principal (uma c√≥pia dele)."""
    print("\n--- Filtrar e Ordenar Dataset Completo ---")
    print("1. Filtrar por marca")
    print("2. Filtrar por faixa de pre√ßo original")
    print("3. Ordenar por pre√ßo original (crescente)")
    print("4. Ordenar por ano de fabrica√ß√£o (mais novo primeiro)")
    print("5. Filtrar por taxa de deprecia√ß√£o m√°xima (ex: at√© 30%)")
    print("0. Voltar")
    opcao = input("Escolha uma op√ß√£o de filtro/ordena√ß√£o: ").strip()

    # Trabalhar com uma c√≥pia para n√£o alterar o dataset original do menu
    dados_para_exibir = list(dataset)  # C√≥pia superficial

    if opcao == '1':
        marca_filtro = input("Digite a marca para filtrar: ").strip().upper()
        dados_para_exibir = [m for m in dados_para_exibir if m.marca.upper() == marca_filtro]
    elif opcao == '2':
        min_preco = validar_float("Pre√ßo m√≠nimo original: ", min_val=0)
        max_preco = validar_float("Pre√ßo m√°ximo original: ", min_val=min_preco)
        dados_para_exibir = [m for m in dados_para_exibir if min_preco <= m.preco <= max_preco]
    elif opcao == '3':
        dados_para_exibir.sort(key=lambda m: m.preco)  # Ordena in-place a c√≥pia
    elif opcao == '4':
        dados_para_exibir.sort(key=lambda m: m.ano, reverse=True)  # Ordena in-place
    elif opcao == '5':
        max_taxa_deprec = validar_float("Taxa m√°xima de deprecia√ß√£o permitida (ex: 30 para 30%): ", min_val=0,
                                        max_val=100)
        dados_para_exibir = [
            m for m in dados_para_exibir
            if m.preco > 0 and ((m.preco - m.revenda) / m.preco * 100) <= max_taxa_deprec
        ]
    elif opcao == '0':
        return
    else:
        print("Op√ß√£o inv√°lida.")
        return

    if not dados_para_exibir:
        print("\nNenhuma moto encontrada com os crit√©rios especificados.")
    else:
        print("\n" + "=" * 80)
        print(f"{'Marca':<15}{'Modelo':<25}{'Pre√ßo (R$)':<12}{'Revenda (R$)':<15}{'Ano':<6}{'Deprec.%':<10}")
        print("-" * 80)
        for i, m in enumerate(dados_para_exibir):
            if i >= 50:  # Limitar exibi√ß√£o
                print(f"... e mais {len(dados_para_exibir) - 50} motos.")
                break
            deprec_percent = ((m.preco - m.revenda) / m.preco * 100) if m.preco > 0 else 0.0
            print(f"{m.marca:<15}{m.nome:<25}{m.preco:<12.2f}{m.revenda:<15.2f}{m.ano:<6}{deprec_percent:<10.1f}")
        print(f"\nTotal de motos filtradas/ordenadas: {len(dados_para_exibir)} (exibindo at√© 50)")
        print("=" * 80)