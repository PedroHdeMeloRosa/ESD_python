# ui/menu.py
import os
from typing import Any, List, Optional
from modelos.moto import Moto, MotoEstatisticas
from ui.helpers import validar_float, validar_int, obter_dados_moto


# import datetime # helpers.py usa datetime, n√£o diretamente aqui

def menu_estrutura(estrutura: Any, nome_estrutura: str, dataset_principal: List[Moto]) -> None:
    """
    Exibe o menu de opera√ß√µes para uma estrutura de dados espec√≠fica.
    (Docstring completo como na sua vers√£o)
    """
    while True:
        print(f"\n{'=' * 15} MENU: {nome_estrutura.upper()} {'=' * 15}")
        struct_len = -1
        if hasattr(estrutura, '__len__'):
            try:
                struct_len = len(estrutura)
            except TypeError:
                pass

        print(f"Total de motos na estrutura: {struct_len if struct_len != -1 else 'N/A'}")
        print(f"Total de motos no dataset principal: {len(dataset_principal)}")

        print("1. Inserir Moto")
        # Verifica se a remo√ß√£o √© suportada/implementada
        suporta_remocao = hasattr(estrutura, 'remover')
        # Particularidades para Bloom Filter e BTree (com remo√ß√£o placeholder)
        if nome_estrutura == "BLOOM FILTER":
            print("2. Remover Moto (N√£o suportado para Bloom Filter)")
        elif nome_estrutura == "√ÅRVORE B" and suporta_remocao:
            print("2. Remover Moto (Aviso: Implementa√ß√£o placeholder na B-Tree)")
        elif suporta_remocao:
            print("2. Remover Moto")
        else:  # Se n√£o tem 'remover' ou √© uma das exce√ß√µes j√° tratadas
            print(f"2. Remover Moto (N√£o implementado/suportado para {nome_estrutura})")

        print("3. Buscar Moto")
        print("4. Exibir Todas as Motos na Estrutura")
        print("5. Estat√≠sticas Detalhadas do Dataset Completo")
        print("6. Simular Tend√™ncias Futuras (Dataset Completo)")
        print("7. Filtrar e Ordenar (Dataset Completo)")
        print("0. Voltar ao Menu Principal")

        escolha = input("Escolha uma op√ß√£o: ").strip()

        if escolha == '1':  # Inserir
            print("\n--- Inserir Nova Moto ---")
            nova_moto = obter_dados_moto(para_busca=False)
            try:
                if hasattr(estrutura, 'inserir'):
                    estrutura.inserir(nova_moto)
                    if nova_moto not in dataset_principal:
                        dataset_principal.append(nova_moto)
                        print(f"\n‚úÖ Moto '{nova_moto.nome}' inserida na estrutura e adicionada ao dataset principal!")
                    else:
                        print(
                            f"\n‚úÖ Moto '{nova_moto.nome}' inserida na estrutura (j√° existia no dataset principal ou foi inserida com sucesso).")
                else:
                    print(f"\n‚ùå Erro: {nome_estrutura} n√£o suporta inser√ß√£o ou m√©todo n√£o encontrado.")
            except Exception as e:
                print(f"\n‚ùå Erro ao inserir na estrutura {nome_estrutura}: {e}")

        elif escolha == '2':  # Remover
            if nome_estrutura == "BLOOM FILTER":
                print("\n‚ùå Opera√ß√£o de remo√ß√£o n√£o √© suportada por Bloom Filters.")
            elif not hasattr(estrutura, 'remover'):  # Checagem gen√©rica
                print(f"\n‚ùå Opera√ß√£o de remo√ß√£o n√£o implementada para {nome_estrutura}.")
            else:
                print("\n--- Remover Moto ---")
                moto_para_remover = obter_dados_moto(para_busca=True)
                try:
                    removido_da_estrutura = estrutura.remover(moto_para_remover)
                    if removido_da_estrutura:
                        print(f"\n‚úÖ Moto '{moto_para_remover.nome}' removida da estrutura.")
                        try:
                            dataset_principal.remove(moto_para_remover)
                            print("‚úÖ Moto tamb√©m removida do dataset principal.")
                        except ValueError:
                            print("‚ÑπÔ∏è Moto n√£o encontrada no dataset principal (ou j√° removida).")
                    elif nome_estrutura == "√ÅRVORE B":
                        print(
                            f"\nüü° Remo√ß√£o na B-Tree √© placeholder ou moto '{moto_para_remover.nome}' n√£o foi efetivamente removida/encontrada.")
                    else:
                        print(f"\nüü° Moto '{moto_para_remover.nome}' n√£o encontrada/removida da {nome_estrutura}.")
                except Exception as e:
                    print(f"\n‚ùå Erro ao remover da estrutura {nome_estrutura}: {e}")

        elif escolha == '3':  # Buscar
            if not hasattr(estrutura, 'buscar'):
                print(f"\n‚ùå Opera√ß√£o de busca n√£o implementada para {nome_estrutura}.")
            else:
                # ... (c√≥digo da sua vers√£o que funcionava) ...
                print("\n--- Buscar Moto ---")
                moto_para_buscar = obter_dados_moto(para_busca=True)
                try:
                    if nome_estrutura == "BLOOM FILTER":
                        encontrado_bf = estrutura.buscar(moto_para_buscar)
                        print(
                            f"\nResultado da busca no Bloom Filter: {'PROVAVELMENTE ENCONTRADO' if encontrado_bf else 'DEFINITIVAMENTE N√ÉO ENCONTRADO'}")
                        if encontrado_bf: print("  (Lembre-se que Bloom Filters podem ter falsos positivos)")
                    else:
                        encontrado, passos = estrutura.buscar(moto_para_buscar)
                        status = "‚úÖ Encontrado" if encontrado else "üü° N√£o encontrado"
                        print(f"\nResultado da busca: {status} em {passos} passos/compara√ß√µes.")
                except Exception as e:
                    print(f"\n‚ùå Erro ao buscar na estrutura {nome_estrutura}: {e}")


        elif escolha == '4':  # Exibir
            if hasattr(estrutura, 'exibir'):
                # ... (c√≥digo da sua vers√£o que funcionava) ...
                print(f"\n--- Exibindo Motos em {nome_estrutura} ---")
                estrutura.exibir()
            else:
                print(f"\n‚ùå Opera√ß√£o de exibi√ß√£o n√£o implementada para {nome_estrutura}.")

        elif escolha == '5':  # Estat√≠sticas do Dataset Completo
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio. N√£o h√° estat√≠sticas para calcular.")
            else:
                # ... (C√ìDIGO COMPLETO DE EXIBI√á√ÉO DE ESTAT√çSTICAS E CHAMADA DE GR√ÅFICOS - como corrigido anteriormente) ...
                print("\n--- Estat√≠sticas Detalhadas do Dataset Completo ---")
                estatisticas = MotoEstatisticas.calcular_estatisticas(dataset_principal)
                print(f"\nPre√ßos (Total: {len(dataset_principal)} motos):")
                print(f"  M√©dia: R${estatisticas['preco']['media']:.2f}")
                print(f"  Mediana: R${estatisticas['preco']['mediana']:.2f}")
                print(f"  Desvio Padr√£o: R${estatisticas['preco']['desvio_padrao']:.2f}")
                print(f"  Vari√¢ncia: R${estatisticas['preco']['variancia']:.2f}")
                print(f"\nRevendas:")
                print(f"  M√©dia: R${estatisticas['revenda']['media']:.2f}")
                print(f"  Mediana: R${estatisticas['revenda']['mediana']:.2f}")
                print(f"  Desvio Padr√£o: R${estatisticas['revenda']['desvio_padrao']:.2f}")
                print(f"  Vari√¢ncia: R${estatisticas['revenda']['variancia']:.2f}")
                print(f"\nAnos:")
                moda_anos = estatisticas['ano']['moda']
                if isinstance(moda_anos, list):
                    print(f"  Moda(s): {', '.join(map(str, moda_anos))}")
                else:
                    print(f"  Moda: {moda_anos}")
                print(f"  M√©dia: {estatisticas['ano']['media']:.1f}")
                print(f"  Mediana: {estatisticas['ano']['mediana']}")
                print(f"\nDeprecia√ß√£o (Valor Absoluto):")
                print(f"  M√©dia: R${estatisticas['depreciacao']['media']:.2f}")
                print(f"  Mediana: R${estatisticas['depreciacao']['mediana']:.2f}")
                print(f"\nTaxa de Deprecia√ß√£o (%):")
                print(f"  M√©dia: {estatisticas['taxa_depreciacao']['media']:.2f}%")
                print(f"  Mediana: {estatisticas['taxa_depreciacao']['mediana']:.2f}%")
                print("\nGerando gr√°ficos estat√≠sticos do dataset completo...")
                MotoEstatisticas.gerar_graficos(dataset_principal)


        elif escolha == '6':  # Simular Tend√™ncias
            # ... (c√≥digo da sua vers√£o que funcionava) ...
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio.")
            else:
                try:
                    anos_futuros = validar_int("Quantos anos no futuro para prever (ex: 5)? ", min_val=1, max_val=50)
                    MotoEstatisticas.prever_tendencias(dataset_principal, anos_futuros)
                except ValueError:
                    print("Erro: Entrada inv√°lida para anos futuros.")

        elif escolha == '7':  # Filtrar e Ordenar
            # ... (c√≥digo da sua vers√£o que funcionava, chamando submenu_filtrar_ordenar) ...
            if not dataset_principal:
                print("\nüü° Dataset principal est√° vazio.")
            else:
                submenu_filtrar_ordenar(dataset_principal)

        elif escolha == '0':
            print(f"\nVoltando ao Menu Principal...")
            break
        else:
            print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")

        input("\nPressione Enter para continuar...")


def submenu_filtrar_ordenar(dataset: List[Moto]):
    # ... (C√ìDIGO COMPLETO DA SUA VERS√ÉO QUE FUNCIONAVA - SEM MUDAN√áAS NECESS√ÅRIAS AQUI) ...
    print("\n--- Filtrar e Ordenar Dataset Completo ---")
    print("1. Filtrar por marca")
    print("2. Filtrar por faixa de pre√ßo original")
    print("3. Ordenar por pre√ßo original (crescente)")
    print("4. Ordenar por ano de fabrica√ß√£o (mais novo primeiro)")
    print("5. Filtrar por taxa de deprecia√ß√£o m√°xima (ex: at√© 30%)")
    print("0. Voltar")
    opcao = input("Escolha uma op√ß√£o de filtro/ordena√ß√£o: ").strip()
    dados_para_exibir = list(dataset)
    if opcao == '1':
        marca_filtro = input("Digite a marca para filtrar: ").strip().upper()
        if marca_filtro:
            dados_para_exibir = [m for m in dados_para_exibir if m.marca.upper() == marca_filtro]
        else:
            print("Marca vazia, nenhum filtro aplicado.")
    elif opcao == '2':
        min_preco = validar_float("Pre√ßo m√≠nimo original: ", min_val=0)
        max_preco = validar_float("Pre√ßo m√°ximo original: ", min_val=min_preco)
        dados_para_exibir = [m for m in dados_para_exibir if min_preco <= m.preco <= max_preco]
    elif opcao == '3':
        dados_para_exibir.sort(key=lambda m: m.preco)
    elif opcao == '4':
        dados_para_exibir.sort(key=lambda m: m.ano, reverse=True)
    elif opcao == '5':
        max_taxa_deprec = validar_float("Taxa m√°xima de deprecia√ß√£o permitida (ex: 30 para 30%): ", min_val=0,
                                        max_val=100)
        dados_para_exibir = [
            m for m in dados_para_exibir
            if m.preco > 0 and ((m.preco - m.revenda) / m.preco * 100) <= max_taxa_deprec
        ]
    elif opcao == '0':
        return
    else:
        print("Op√ß√£o inv√°lida.")
        return
    if not dados_para_exibir:
        print("\nNenhuma moto encontrada com os crit√©rios especificados.")
    else:
        print("\n" + "=" * 80)
        print(f"{'Marca':<15}{'Modelo':<25}{'Pre√ßo (R$)':<12}{'Revenda (R$)':<15}{'Ano':<6}{'Deprec.%':<10}")
        print("-" * 80)
        for i, m in enumerate(dados_para_exibir):
            if i >= 50:
                print(f"... e mais {len(dados_para_exibir) - 50} motos.")
                break
            deprec_percent = ((m.preco - m.revenda) / m.preco * 100) if m.preco > 0 else 0.0
            print(f"{m.marca:<15}{m.nome:<25}{m.preco:<12.2f}{m.revenda:<15.2f}{m.ano:<6}{deprec_percent:<10.1f}")
        print(f"\nTotal de motos filtradas/ordenadas: {len(dados_para_exibir)} (exibindo at√© 50)")
        print("=" * 80)